<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
LayerListComponent


@kmanohar
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.editors.managers.*"
		 verticalGap="0"
		 width="100%" height="100%"
		 label="Layers (Beta)" xmlns:ui="weave.ui.*">
	<mx:HBox width="100%" id="titleHBox" horizontalGap="0">
		<mx:Label text="{label}" fontWeight="bold"/>
		<mx:HBox width="100%" id="selectorControls">
			<mx:Spacer width="100%"/>
			<mx:Button label="Add layer..." click="addLayer()"/>
			<!--<mx:Button label="Open editor..." click="openSelector()"/>-->
		</mx:HBox>
	</mx:HBox>
	<ui:LinkableObjectList id="internalList" width="100%" height="100%" hashMap="{_hashMap}">
		<ui:itemRenderer>
			<mx:Component>
				<mx:HBox width="100%" horizontalScrollPolicy="off">
					<mx:Script>
						<![CDATA[
							import mx.managers.PopUpManager;
							
							import weave.api.linkBindableProperty;
							import weave.api.newDisposableChild;
							import weave.api.ui.ILinkableObjectEditor;
							import weave.api.ui.IPlotLayer;
							import weave.api.ui.IPlotter;
							import weave.api.unlinkBindableProperty;
							import weave.ui.AlertTextBox;
							import weave.ui.AlertTextBoxEvent;
							import weave.ui.ControlPanel;
							import weave.ui.SessionStateEditor;
							import weave.utils.EditorManager;
							import weave.visualization.layers.PlotLayer;
							import weave.visualization.layers.SelectablePlotLayer;
							import weave.visualization.plotters.DynamicPlotter;
							
							private function openSettingsPanel(layer:IPlotLayer):void
							{
								var plotter:IPlotter = null;
								if (layer)
									plotter = (layer.plotter as DynamicPlotter).internalObject as IPlotter;
								
								// add editor component to layercontrols
								var editor:ILinkableObjectEditor = EditorManager.getNewEditor(plotter);
								if (editor)
								{
									var controls:ControlPanel = newDisposableChild(plotter, ControlPanel);
									PopUpManager.addPopUp(controls, this);
									PopUpManager.centerPopUp(controls);
									controls.targets = [outerDocument.visTool];

									controls.tabNavigator.addChild(editor as DisplayObject);
								}
								else
								{
									SessionStateEditor.openDefaultEditor(plotter);
								}
							}
							
							[Bindable] public var layerIsVisible:Boolean = true;
							[Bindable] public var layerIsSelectable:Boolean = true;
							override public function set data(value:Object):void
							{
								if (value == data)
									return;
								
								// unlink checkbox from old layer
								if (data is PlotLayer)
								{
									unlinkBindableProperty((data as PlotLayer).layerIsVisible, this, "layerIsVisible");
								}
								if (data is SelectablePlotLayer)
								{
									unlinkBindableProperty((data as SelectablePlotLayer).layerIsVisible, this, "layerIsVisible");
									unlinkBindableProperty((data as SelectablePlotLayer).layerIsSelectable, this, "layerIsSelectable");
								}
								
								// save pointer to new layer
								super.data = value;
								
								// link checkbox to new layer
								if (data is PlotLayer)
								{
									linkBindableProperty((data as PlotLayer).layerIsVisible, this, "layerIsVisible");
									layerIsSelectable = false;
								}
								if (data is SelectablePlotLayer)
								{
									linkBindableProperty((data as SelectablePlotLayer).layerIsVisible, this, "layerIsVisible");
									linkBindableProperty((data as SelectablePlotLayer).layerIsSelectable, this, "layerIsSelectable");
									selectedCheckbox.visible = true;
								}
								else
								{
									selectedCheckbox.visible = false;
								}
								
							}
							
							protected function onLayerRenameButtonClick(event:MouseEvent,data:Object):void
							{
								var defaultInputString:String = outerDocument.internalList.getItemLabel(data);
								var alertBox:AlertTextBox = AlertTextBox.show("Rename Layer","Please enter a new layer name:",defaultInputString);
								
								alertBox.addEventListener(AlertTextBoxEvent.BUTTON_CLICKED, 
									function (e:AlertTextBoxEvent):void 
									{
										// if the user clicked cancel, then we will just return from here and save nothing
										if( !e.confirm ) return;
										
										//Alert.show("Input was " + e.textInput);
										
										outerDocument.hashMap.renameObject(defaultInputString,e.textInput);
									}
								);
							}
							
						]]>
					</mx:Script>
					<mx:CheckBox id="visibleCheckbox" label="visible" selected="{layerIsVisible}" change="layerIsVisible = event.target.selected"/>
					<mx:CheckBox id="selectedCheckbox" label="selectable" selected="{layerIsSelectable}" change="layerIsSelectable = event.target.selected"/>
					<mx:Label textAlign="center" width="100%" text="{outerDocument.internalList.getItemLabel(data)}"/>
					<mx:Button label="Rename..." toolTip="Click to rename the layer." click="onLayerRenameButtonClick(event,data)"/>
					<mx:Button label="Settings..." click="openSettingsPanel(data as IPlotLayer)"/>
				</mx:HBox>
			</mx:Component>
		</ui:itemRenderer>
	</ui:LinkableObjectList>
	<mx:HBox width="100%">
		<mx:Spacer width="100%"/>
		<mx:Button
			label="Remove selected"
			toolTip="Click here to remove one or more selected layers in the list above."
			click="internalList.removeSelectedItem()"
			enabled="{internalList.selectedIndex >= 0}"/>
	</mx:HBox>
	<!--
	<mx:CheckBox id="enableAutoZoom" label="Enable auto zoom to extent"
				 creationComplete="linkBindableProperty(_visTool.visualization.enableAutoZoomToExtent, event.target, 'selected');"/>
	<mx:CheckBox label="Enable zoom and pan"
				 creationComplete="linkBindableProperty(_visTool.visualization.enableZoomAndPan, event.target, 'selected');"/>
	-->
	<mx:HBox width="100%" id="boundsProperties" verticalAlign="middle">
		<mx:Label text="Override auto zoom:"/>
		<ui:TextInputWithPrompt id="overrideXMin" prompt="xMin" width="{boundsInputWidth}"/>
		<mx:VBox>
			<ui:TextInputWithPrompt id="overrideYMax" prompt="yMax" width="{boundsInputWidth}"/>
			<ui:TextInputWithPrompt id="overrideYMin" prompt="yMin" width="{boundsInputWidth}"/>
		</mx:VBox>
		<ui:TextInputWithPrompt id="overrideXMax" prompt="xMax" width="{boundsInputWidth}"/>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import weave.api.core.ILinkableHashMap;
			import weave.ui.SessionStateEditor;
			import weave.visualization.tools.SimpleVisTool;
			import weave.api.linkBindableProperty;

			private static const boundsInputWidth:int = 64;
			
			[Bindable] private var _visTool:SimpleVisTool = null;
			
			[Inspectable]
			public function set visTool(value:SimpleVisTool):void
			{
				_visTool = value;
			}
			public function get visTool():SimpleVisTool
			{
				return _visTool;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				if (_visTool)
				{
					linkBindableProperty(_visTool.visualization.overrideXMin, overrideXMin, 'text');
					linkBindableProperty(_visTool.visualization.overrideYMin, overrideYMin, 'text');
					linkBindableProperty(_visTool.visualization.overrideXMax, overrideXMax, 'text');
					linkBindableProperty(_visTool.visualization.overrideYMax, overrideYMax, 'text');
					_visTool.visualization.enableAutoZoomToExtent.addGroupedCallback(this, handleAutoZoomToggle, true);
				}
			}
			
			private function handleAutoZoomToggle():void
			{
				var enabled:Boolean = _visTool.visualization.enableAutoZoomToExtent.value;
				boundsProperties.visible = enabled;
				boundsProperties.includeInLayout = enabled;
			}
			
			private function openSelector():void
			{
				if (_visTool)
					SessionStateEditor.openDefaultEditor(internalList.hashMap);
				else
					SessionStateEditor.openDefaultEditor(internalList.hashMap);
			}
			
			[Bindable] private var _hashMap:ILinkableHashMap = null;
			
			[Inspectable]
			public function set hashMap(value:ILinkableHashMap):void
			{
				_hashMap = value;
			}
			public function get hashMap():ILinkableHashMap
			{
				return internalList.hashMap;
			}
			
			[Bindable]
			public function get length():int
			{
				return hashMap.getNames().length;
			}
			public function set length(value:int):void
			{
				// untested
				hashMap.getNames().length = value;
			}
			
			[Bindable]
			private var _minimumNumObjectsInList:int = -1;
			public function set minimumNumObjectsInList(value:int):void
			{
				_minimumNumObjectsInList = value;
			}
			
			[Inspectable]
			public function set dragMoveEnabled(value:Boolean):void
			{
				// this value has to be stored for later because internalList may be null
				_dragMoveEnabled = value;
			}
			[Bindable] private var _dragMoveEnabled:Boolean = false;

			private function addLayer():void
			{
				var popup:* = PopUpManager.createPopUp(this, CustomLayerWindow);
				(popup as CustomLayerWindow).targetTool = _visTool;
				PopUpManager.centerPopUp(popup);
			}
		]]>
	</mx:Script>
</mx:VBox>
