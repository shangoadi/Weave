<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
	     layout="absolute" xmlns:userControls="weave.ui.userControls.*" creationPolicy="all"
	     xmlns:mapTool="weave.visualization.tools.*" xmlns:managers="weave.editors.managers.*"
	     >
	<mx:Script>
		<![CDATA[
			import mx.controls.CheckBox;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.data.AttributeColumnMetadata;
			import weave.api.data.DataTypes;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.primitives.IBounds2D;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IPlotLayer;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableString;
			import weave.core.SessionManager;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.data.AttributeColumns.ReprojectedGeometryColumn;
			import weave.primitives.Bounds2D;
			import weave.services.wms.WMSProviders;
			import weave.ui.ColorController;
			import weave.ui.DraggablePanel;
			import weave.ui.DynamicColumnComponent;
			import weave.utils.ColumnUtils;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.layers.InteractionController;
			import weave.visualization.layers.PlotLayer;
			import weave.visualization.layers.SelectablePlotLayer;
			import weave.visualization.plotters.GeometryLabelPlotter;
			import weave.visualization.plotters.GeometryPlotter;
			import weave.visualization.plotters.SingleImagePlotter;
			import weave.visualization.plotters.WMSPlotter;

			WeaveAPI.registerImplementation(IVisTool, MapTool, "Map");
			
			// disable default plot layer
			override protected function get plotLayer():SelectablePlotLayer { return null; }
			
			override protected function constructor():void
			{
				super.constructor();
								
				// make sure WMS layers are included in the full data bounds
				visualization.includeNonSelectableLayersInAutoZoom.value = true;
				visualization.includeNonSelectableLayersInAutoZoom.lock();
				
				visualization.enableFixedAspectRatio.value = true;
				visualization.enableAutoZoomToExtent.value = false;
				getCallbackCollection(visualization).addGroupedCallback(this, updateZoomSlider);
				
				colorColumn.addGroupedCallback(this, handlePanelTitleChange);
				Weave.properties.toolInteractions.defaultDragMode.addGroupedCallback(this, handleMouseModeChange);
				
				visualization.layers.addGroupedCallback(this,handleLayersChange,true);
				colorColumn.addGroupedCallback(this,updateProbeColumns, true);				
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["Color"];
			}
			override public function getSelectableAttributes():Array
			{
				return [colorColumn];
			}
			
			/**
			 * This function moves the overview window in front of the visualization
			 */
			private function bringOverviewToTop():void
			{
				children.setNameOrder([OVERVIEW_PANEL_NAME]);
			}
			
			/**
			 * This is the projection of the map visualization.
			 */
			public const projectionSRS:LinkableString = registerLinkableChild(this, new LinkableString(null, projectionVerifier));
			// this function returns true if the projection SRS code is acceptable
			private function projectionVerifier(srs:String):Boolean
			{
				// allow no projection
				if (srs == null || srs == '')
					return true;
				return WeaveAPI.ProjectionManager.projectionExists(srs);
			}
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			// the keys in this Dictionary are LinkableStrings that have been linked to projectionSRS.
			private var _linkedProjectionVariablesLookup:Dictionary = new Dictionary(true);
			/**
			 * This function links the MapTool.projectionSRS variable with another LinkableString.
			 */
			private function linkProjection(otherVariable:LinkableString):void
			{
				if (_linkedProjectionVariablesLookup[otherVariable])
					return;
				_linkedProjectionVariablesLookup[otherVariable] = true;
				
				// if map tool specifies a valid projection, use map tool value as the primary value
				if (WeaveAPI.ProjectionManager.projectionExists(projectionSRS.value))
					linkSessionState(projectionSRS, otherVariable);
				else
					linkSessionState(otherVariable, projectionSRS);
			}
			
			[Bindable] private var _projComboBoxData:Array = [];
			private function handleLayersChange():void
			{
				_projComboBoxData.length = 0;
				// TEMPORARY: set the selected item in the combo box because changing the data provider 
				// will reset the text field
				if (WeaveAPI.ProjectionManager.projectionExists(projectionSRS.value))
				{
					_projComboBoxData.push(projectionSRS.value);
					projComboBox.selectedItem = projectionSRS.value; 
				}
				
				var projString:String;
				
				// make sure wms layer projections are identical
				var wmsPlotters:Array = WeaveAPI.SessionManager.getLinkableDescendants(visualization.layers, WMSPlotter);
				for each (var wmsPlotter:WMSPlotter in wmsPlotters)
				{
					linkProjection(wmsPlotter.srs);
					projString = WMSProviders.getSRS(wmsPlotter.serviceName.value);
					if (projString && _projComboBoxData.indexOf(projString) < 0)
						_projComboBoxData.push(projString);
				}
				
				// make sure all geometry column projections are identical
				var reprojectedColumns:Array = WeaveAPI.SessionManager.getLinkableDescendants(visualization.layers, ReprojectedGeometryColumn);
				for each (var column:ReprojectedGeometryColumn in reprojectedColumns)
				{
					linkProjection(column.projectionSRS);
					projString = column.internalDynamicColumn.getMetadata(AttributeColumnMetadata.PROJECTION);
					if (projString && _projComboBoxData.indexOf(projString) < 0)
						_projComboBoxData.push(projString);					
				}
				
				// force label plotters to use text bitmap filters
				for each (var layer:SelectablePlotLayer in visualization.layers.getObjects(SelectablePlotLayer))
					if (layer.getDynamicPlotter().internalObject is GeometryLabelPlotter)
						layer.useTextBitmapFilters.value = true;

				updateProbeColumns();
			}
			private function updateProbeColumns():void
			{
				if (includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = [] ;
					var plotLayers:Array = visualization.layers.getObjects(SelectablePlotLayer);
					for (var i:int = 0; i < plotLayers.length; i++)
					{
						var spl:SelectablePlotLayer = (plotLayers[i] as SelectablePlotLayer);
						// get all ReferencedColumn objects, excluding geometry columns
						var refCols:Array = WeaveAPI.SessionManager.getLinkableDescendants(spl.plotter, ReferencedColumn);
						for each (var col:IAttributeColumn in refCols)
							if (ObjectUtil.stringCompare(ColumnUtils.getDataType(col), DataTypes.GEOMETRY, true) != 0) // non-geometry
								visualization.additionalProbeColumns.push(col);
					}
				}
				else
					visualization.additionalProbeColumns = null;
			}
			
			override protected function get defaultPanelTitle():String
			{
				return "Map " + (colorColumn.internalColumn == null ? '' : "of " + ColumnUtils.getTitle(colorColumn));
			}
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				var backgroundImageCheck:CheckBox = new CheckBox();
				backgroundImageCheck.label = "Enable ocean background image";
				linkBindableProperty(enableBackground, backgroundImageCheck, "selected");
				simpleAxisEditor.initialize();
				simpleAxisEditor.addChild(backgroundImageCheck);
				simpleAxisEditor.marginProperties.parent.removeChild(simpleAxisEditor.marginProperties);
				
				linkBindableProperty(visualization.minZoomLevel, this, "zoomSliderMinimum");
				linkBindableProperty(visualization.maxZoomLevel, this, "zoomSliderMaximum");
				
				if (visualization.layers.getNames().length == 0)
					addGeomLayer();
				getCallbackCollection(visualization.zoomBounds).addGroupedCallback(this, handleBoundsChange, true);
				
				linkSessionState(showZoomControls,visualization.enableZoomAndPan);
			}
			
			private function handleMouseModeChange(event:Event = null):void
			{
				var defaultMode:String;
				if (event)
				{
					switch (event.target)
					{
						case panModeButton:
							defaultMode = InteractionController.PAN;
							break;
						default:
						case selectModeButton:
							defaultMode = InteractionController.SELECT;
							break;
						case selectModeSubtractButton:
							defaultMode = InteractionController.SELECT_REMOVE;
							break;
						case selectModeAddButton:
							defaultMode = InteractionController.SELECT_ADD;
							break;
						case zoomModeButton:
							defaultMode = InteractionController.ZOOM;
							break;
					}
					Weave.properties.toolInteractions.defaultDragMode.value = defaultMode;
				}
				defaultMode = Weave.properties.toolInteractions.defaultDragMode.value;
				
				var buttonMap:Object = {};
				buttonMap[InteractionController.PAN] = panModeButton;
				buttonMap[InteractionController.SELECT] = selectModeButton;
				buttonMap[InteractionController.SELECT_REMOVE] = selectModeSubtractButton;
				buttonMap[InteractionController.SELECT_ADD] = selectModeAddButton;
				buttonMap[InteractionController.ZOOM] = zoomModeButton;
				var selectedButton:Button = buttonMap[defaultMode];
				for each (var button:Button in buttonMap)
					button.selected = (button == selectedButton);
			}
			
			
			public function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			
			
			private function setCenterCoords():void
			{
//				var x:Number = MathLib.toNumber(xCenterCoord.text);
//				var y:Number = MathLib.toNumber(yCenterCoord.text);
//				visualization.dataBounds.copyTo(_tempBounds);
//				_tempBounds.setCenter(x, y);
//				visualization.dataBounds.copyFrom(_tempBounds);
			}
			
			public function updateZoomSlider():void
			{
				if (zoomSlider)
				{
					currentlyUpdatingZoomSlider = true;
					scaleRangeTabZoomSlider.value = zoomSlider.value = visualization.getZoomLevel();
					currentlyUpdatingZoomSlider = false;
				}
			}
			private var currentlyUpdatingZoomSlider:Boolean = false;
			
			private function handleZoomSliderChange(event:Event):void
			{
				if (!currentlyUpdatingZoomSlider)
					visualization.setZoomLevel(event.currentTarget.value);
			}
			
			[Embed(source='/weave/resources/images/lockClosed.png')]
			private var LockClosed:Class;
			
			[Embed(source='/weave/resources/images/lockOpen.png')]
			private var LockOpen:Class;
			
			
			private function handleZoomControlsMinimizeCheck():void
			{
				zoomControlsToggle.selected = !zoomControlsMinimizeCheck.selected;
								
			}
			
			private function handleShowZoomControlsChange():void
			{
				
				zoomControlsMinimizeCheck.selected = !showZoomControls.value;
				
				if(zoomControlsMinimizeCheck.selected)
				{
					zoomControlsMinimizeCheck.setStyle("icon",LockClosed);
				}else{
					zoomControlsMinimizeCheck.setStyle("icon",LockOpen);
				}
			}
			
			private function handleZoomInClick():void
			{
				visualization.zoomBounds.getDataBounds(_tempBounds);
				_tempBounds.centeredResize(_tempBounds.getWidth() / 2, _tempBounds.getHeight() / 2);
				visualization.zoomBounds.setDataBounds(_tempBounds);
			}
			
			private function handleZoomOutClick():void
			{
				visualization.zoomBounds.getDataBounds(_tempBounds);
				_tempBounds.centeredResize(_tempBounds.getWidth() * 2, _tempBounds.getHeight() * 2);
				visualization.zoomBounds.setDataBounds(_tempBounds);
			}
			
			private function handlePanButtonClick(xPan:Number, yPan:Number):void
			{
				var panPercent:Number = 0.3;
				
				visualization.zoomBounds.getDataBounds(_tempBounds);
				_tempBounds.offset(
						_tempBounds.getWidth() * panPercent * xPan,
						_tempBounds.getHeight() * panPercent * yPan
					);
				visualization.zoomBounds.setDataBounds(_tempBounds);
			}
			
			private var _tempBounds:IBounds2D = new Bounds2D();

			[Embed(source="/weave/resources/images/ocean_background2.jpg")]
			private static const BackgroundImage:Class;
			private static const backgroundImageBitmapData:BitmapData = (new BackgroundImage() as Bitmap).bitmapData;
			
			public const enableBackground:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), invalidateDisplayList);
			public const enableOverview:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateOverviewWindow);
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				visualization.graphics.clear();
				if (enableBackground.value)
				{
					visualization.graphics.lineStyle(0,0,0);
					visualization.graphics.beginBitmapFill(backgroundImageBitmapData);
					visualization.graphics.drawRect(0, 0, visualization.width, visualization.height);
				}
			}
			
			private function addGeomLayer():void
			{
				var layer:SelectablePlotLayer = visualization.layers.requestObject(visualization.layers.generateUniqueName("plot"), SelectablePlotLayer, false);
				var plotter:GeometryPlotter = layer.getDynamicPlotter().requestLocalObject(GeometryPlotter, true);
			}
			
			private function addLabelLayer():void
			{
				var i:int;
				// get existing layers before they change
				var layers:Array = visualization.layers.getObjects(SelectablePlotLayer).reverse(); // top to bottom
				// if a layer is selected in the editor, check that one first.
				if (layerEditor.selectedItem is SelectablePlotLayer)
					layers.unshift(layerEditor.selectedItem);
				// create new label layer
				var labelLayer:SelectablePlotLayer = visualization.layers.requestObject(visualization.layers.generateUniqueName("label"), SelectablePlotLayer, false);
				var plotter:GeometryLabelPlotter = labelLayer.getDynamicPlotter().requestLocalObject(GeometryLabelPlotter, true);
				// loop through existing layers to find geometry layer that we can add corresponding labels for
				for (i = 0; i < layers.length; i++)
				{
					var geomLayer:SelectablePlotLayer = layers[i];
					var geomPlotter:GeometryPlotter = geomLayer.getDynamicPlotter().internalObject as GeometryPlotter;
					if (geomPlotter)
					{
						// found a geometry layer
						copySessionState(geomPlotter.geometryColumn, plotter.geometryColumn);
						// see if there is a matching column in probe headers
						var headers:Array = ProbeTextUtils.probeHeaderColumns.getObjects();
						for (i = 0; i < headers.length; i++)
						{
							if (ColumnUtils.getKeyType(headers[i]) == ColumnUtils.getKeyType(geomPlotter.geometryColumn))
							{
								plotter.text.requestLocalObjectCopy(headers[i]);
								break;
							}
						}
						// stop when we found geometry layer
						break;
					}
				}
			}
			
			private function addWMSLayer():void
			{
				var oldLayerNames:Array = visualization.layers.getNames();
				var layer:PlotLayer = visualization.layers.requestObject(visualization.layers.generateUniqueName("wms"), PlotLayer, false);
				var plotter:WMSPlotter = layer.getDynamicPlotter().requestLocalObject(WMSPlotter, true) as WMSPlotter;
				
				//plotter.serviceName = WMSProviders.NASA;
				// put old layers on top
				visualization.layers.setNameOrder(oldLayerNames);
			}

			private function handleBoundsChange():void
			{
				// update center coordinates text boxes
				visualization.zoomBounds.getDataBounds(_tempBounds);
				xCenterCoord.text = String(_tempBounds.getXCenter());
				yCenterCoord.text = String(_tempBounds.getYCenter());
			}
			
			public var overviewPanel:MapOverviewWindow;
			private const OVERVIEW_PANEL_NAME:String = "overview";
			
			private function updateOverviewWindow():void
			{				
				if (enableOverview.value)
				{					
					overviewPanel = children.requestObject(OVERVIEW_PANEL_NAME,MapOverviewWindow,false); //not locked because it should be removable
					overviewPanel.parentTool = this;

					// remove overview window from parent's session state
					(WeaveAPI.SessionManager as SessionManager).removeLinkableChildFromSessionState(children, overviewPanel);
					linkSessionState(visualization.layers, overviewPanel.visualization.layers); 
					linkSessionState(visualization.zoomBounds, overviewPanel.parentZoomBounds);
					children.addGroupedCallback(this, bringOverviewToTop);
					visualization.layers.addGroupedCallback(this,overviewPanel.drawBoundsRectangle);					
				}
				else
				{					
					children.removeObject(OVERVIEW_PANEL_NAME);					
				}
				
			} 
			
			public function addMarker(name:String,url:String,x:Number,y:Number,width:Number=NaN,height:Number=NaN):void
			{
				var plotLayer:PlotLayer = visualization.layers.requestObject(name, PlotLayer, false);
				
				var marker:SingleImagePlotter = plotLayer.getDynamicPlotter().requestLocalObject(SingleImagePlotter, false);
				
				marker.imageURL.value = url;
				
				marker.dataX.value = x;
				marker.dataY.value = y;
				
				marker.dataWidth.value = width;
				marker.dataHeight.value = height;
			}



			public const showZoomControls:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true),handleShowZoomControlsChange,true);
			public const showMouseModeControls:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			
			private const _tempArray:Array = [];
			
			private function handleProjectionComboChange():void
			{
				if (UIUtils.hasFocus(projComboBox))
				{
					// clear all layer visibility settings because they are no longer valid in the new projection
					visualization.layers.delayCallbacks();
					for each (var layer:IPlotLayer in visualization.layers.getObjects(IPlotLayer))
					{
						if (layer is PlotLayer)
						{
							(layer as PlotLayer).minVisibleScale.value = 0;
							(layer as PlotLayer).maxVisibleScale.value = Infinity;
						}
						if (layer is SelectablePlotLayer)
						{
							(layer as SelectablePlotLayer).minVisibleScale.value = 0;
							(layer as SelectablePlotLayer).maxVisibleScale.value = Infinity;
						}
					}
					visualization.layers.resumeCallbacks();
				}
				if (projectionVerifier(projComboBox.text))
				{
					projValidLabel.text = 'Valid';
					projComboBox.errorString = '';
				}
				else
				{
					projValidLabel.text = 'Invalid';
					projComboBox.errorString = 'Unknown projection';
				}
			}
			
			
			// BACKWARDS COMPATIBILITY
			[Deprecated(replacement="visualization.zoomToSelection")] public function get zoomToSelection():Function { return visualization.zoomToSelection; }
		]]>
	</mx:Script>

	<mx:VBox id="mapControls"
				horizontalAlign="center"
				verticalGap="{zoomControlsToggle.selected ? 2 : 0}"
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2"
				right="0" bottom="0"
				backgroundColor="white" backgroundAlpha="0.01">
		<mx:VBox paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2"
				includeInLayout="{zoomControlsToggle.selected}"
				visible="{zoomControlsToggle.selected}"
				verticalGap="2">
			
			<mx:VBox id="panControls" horizontalAlign="center" verticalGap="1" height="100%">
				<mx:Button id="north"
							label="N"
							fillAlphas="[1.0, 1.0, 1.0, 1.0]"
							width="16" height="16"
							click="handlePanButtonClick(0,1)"
							labelPlacement="left" fontSize="10" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" cornerRadius="0" textAlign="center"
							/>
				
				<mx:HBox horizontalGap="2">			
					<mx:Button id="west"
						    label="W" toolTip=""
							fillAlphas="[1.0, 1.0, 1.0, 1.0]"
							width="16" height="16"
							click="handlePanButtonClick(-1,0)"
							 labelPlacement="left" fontSize="10" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" cornerRadius="0" textAlign="center"/>
					<mx:Button id="zoomToExtentButton"
							   toolTip="Click this button to zoom to map's full extent"
							   icon="@Embed(source='/weave/resources/images/zoomToExtent.png')"
							   fillAlphas="[1,1]" 
							   width="16" height="16" 
							   cornerRadius="0"
							   click="visualization.zoomToSelection()"/>
					<mx:Button id="east"
						    label="E"
							fillAlphas="[1.0, 1.0, 1.0, 1.0]"
							width="16" height="16"
							click="handlePanButtonClick(1,0)"
							labelPlacement="left" fontSize="10" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" cornerRadius="0" textAlign="center"/>
				</mx:HBox>
				
				<mx:Button id="south"
							label="S"
							fillAlphas="[1.0, 1.0, 1.0, 1.0]"
							width="16" height="16"
							click="handlePanButtonClick(0,-1)"
							labelPlacement="left" fontSize="10" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" cornerRadius="0" textAlign="center"/>
			</mx:VBox>
		</mx:VBox>
		
		<mx:VBox paddingLeft="2" paddingRight="2" paddingBottom="2" paddingTop="2"
				verticalGap="2"
				includeInLayout="{zoomControlsToggle.selected}"
				visible="{zoomControlsToggle.selected}"
				backgroundColor="white" backgroundAlpha="0.85" borderStyle="outset">
			<mx:Button id="zoomIn"
					icon="@Embed(source='/weave/resources/images/zoomPlus.png')"
					fillAlphas="[1.0, 1.0, 1.0, 1.0]"
					width="15" height="15"
					click="handleZoomInClick()"
					cornerRadius="0" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" textAlign="center"/>
			
			<mx:VSlider id="zoomSlider"
						showDataTip="false"
						allowTrackClick="true"
						liveDragging="true"
						tickInterval="1"
						minimum="{zoomSliderMinimum}"
						maximum="{zoomSliderMaximum}"
						height="88"
						change="handleZoomSliderChange(event);"/>
			
			<mx:Button id="zoomOut"
					icon="@Embed(source='/weave/resources/images/zoomMinus.png')"
					fillAlphas="[1.0, 1.0, 1.0, 1.0]"
					width="15" height="15"
					 click="handleZoomOutClick()"
					 cornerRadius="0" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" textAlign="center"/>
		</mx:VBox>
		
		<mx:Spacer height="5" includeInLayout="{zoomControlsToggle.selected}"/>
	
		<!--rollOver="mouseModeBox.alpha = 1" rollOut="mouseModeBox.alpha = 0"-->
		<mx:HBox id="mouseModeBox" horizontalGap="1" right="2" bottom="2"  
				 includeInLayout="{mouseModeControlsToggle.selected}"
				 visible="{mouseModeControlsToggle.selected}"
				 backgroundColor="white" backgroundAlpha="0.01"
				 alpha="1"> 
			<mx:Button id="panModeButton" 
				icon="@Embed(source='/weave/resources/images/cursor_hand.png')"
				fillAlphas="[1,1]"  fillColors="{panModeButton.selected ? [0xFF8080, 0xFF8080] : [0x808080, 0x808080]}"
				alpha="{panModeButton.selected ? 1 : 0.5}"
				width="17" height="17" 
				toggle="true"
				toolTip="Select this mode to enable panning on the map using the mouse."
				click="handleMouseModeChange(event)" cornerRadius="0"/>
			<mx:Button id="selectModeSubtractButton"
				icon="@Embed(source='/weave/resources/images/selectMode_subtract.png')"
				fillAlphas="[1,1]"  fillColors="{selectModeSubtractButton.selected ? [0xFF8080, 0xFF8080] : [0x808080, 0x808080]}"
				alpha="{selectModeSubtractButton.selected ? 1 : 0.5}" 
				width="0" minWidth="0" height="17" 
				visible="false"
				toggle="true"
				toolTip="Select this mode to enable subtracting selections from existing selections of shapes on the map using the mouse."
				click="handleMouseModeChange(event)" cornerRadius="0"
				/>
			<mx:Button id="selectModeButton"
				icon="@Embed(source='/weave/resources/images/selectMode.png')"
				fillAlphas="[1,1]"  fillColors="{selectModeButton.selected ? [0xFF8080, 0xFF8080] : [0x808080, 0x808080]}"
				alpha="{selectModeButton.selected ? 1 : 0.5}"
				width="17" height="17"
				toggle="true"
				toolTip="Select this mode to enable adding selections to existing selections of shapes on the map using the mouse."
				click="handleMouseModeChange(event)" cornerRadius="0"
				selected="true"/>
			<mx:Button id="selectModeAddButton"
				icon="@Embed(source='/weave/resources/images/selectMode_add.png')"
				fillAlphas="[1,1]"  fillColors="{selectModeAddButton.selected ? [0xFF8080, 0xFF8080] : [0x808080, 0x808080]}"
				alpha="{selectModeAddButton.selected ? 1 : 0.5}"
				width="0" minWidth="0" height="17"
				visible="false"
				toggle="true"
				toolTip="Select this mode to enable selection of shapes on the map using the mouse."
				click="handleMouseModeChange(event)" cornerRadius="0"
				/>
			<mx:Button id="zoomModeButton"
				icon="@Embed(source='/weave/resources/images/zoomMode.png')"
				fillAlphas="[1,1]" fillColors="{zoomModeButton.selected ? [0xFF8080, 0xFF8080] : [0x808080, 0x808080]}"
				alpha="{zoomModeButton.selected ? 1 : 0.5}"
				width="17" height="17" 
				toggle="true"
				toolTip="Select this mode to enable zooming on the map using the mouse to create a box around the area you want to zoom into."
				click="handleMouseModeChange(event)" cornerRadius="0"/>
			<mx:Button id="zoomControlsMinimizeCheck"
					   toolTip="Enable/Disable Zoom and Pan"
					   width="17" height="17" toggle="true"
					   selected="{!zoomControlsToggle.selected}"
					   change="handleZoomControlsMinimizeCheck()"/>
		</mx:HBox>
	</mx:VBox>
	

	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="Map Layers">
			<mx:HBox width="100%">
				<mx:Button label="Add Base Map" click="addWMSLayer();" toolTip="Add an image layer underneath the geometries"/>
				<mx:Button label="Add Geometry" click="addGeomLayer();" toolTip="Add a layer of polygons, lines, or points that can be colored according to the data"/>
				<mx:Button label="Add Labels" click="addLabelLayer();" toolTip="Add labels to the selected geometry layer"/>
			</mx:HBox>
			
			<!--<mx:DataGrid dataProvider="{_layerNames.reverse()}">
			<mx:columns>
			<mx:DataGridColumn headerText="Visible"/>
			<mx:DataGridColumn headerText="Probe" headerWordWrap="true"/>
			<mx:DataGridColumn headerText="Geography"/>
			<mx:DataGridColumn headerText="Edit"/>
			<mx:DataGridColumn headerText="Remove"/>
			</mx:columns>
			</mx:DataGrid>-->
			
			<managers:PlotLayerEditor id="layerEditor" creationComplete="layerEditor.visualization = visualization"/>
			<mx:HBox width="100%" verticalAlign="middle">
				<ui:DynamicColumnComponent label="color" showLinkControl="false" visTool="{this}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = colorColumn"/>
				<mx:Button label="Edit Bins..." click="DraggablePanel.openStaticInstance(ColorController);"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox label="Advanced" verticalGap="10">
			<mx:CheckBox label="Enable Map Overview Window" id="overviewCheckBox"
						 creationComplete="linkBindableProperty(enableOverview,event.target,'selected')"/>
			<mx:HBox verticalAlign="bottom">
				<mx:Button label="Zoom to full extent" click="visualization.zoomToSelection()" />
				<mx:VBox verticalGap="1">
					<mx:Label text="Coordinates at map center:" fontWeight="bold"/>
					<mx:HBox horizontalGap="0" borderStyle="outset" horizontalAlign="center">
						<mx:Label text="(x: "/>
						<!--<mx:TextInput id="xCenterCoord" width="50" change="setCenterCoords()" editable="false"/>-->
						<mx:Label id="xCenterCoord" width="75"/>
						<mx:Label text=", y: "/>
						<!--<mx:TextInput id="yCenterCoord" width="50" change="setCenterCoords()" editable="false"/>-->
						<mx:Label id="yCenterCoord" width="75"/>
						<mx:Label text=")"/>
					</mx:HBox>
				</mx:VBox>
			</mx:HBox>
			<mx:HBox verticalAlign="center" horizontalAlign="center">
				<mx:Label text="Projection"/> 
				<ui:CustomComboBox id="projComboBox"
								   dataProvider="{_projComboBoxData}"
								   creationComplete="linkBindableProperty(projectionSRS, event.target, 'text');"
								   change="handleProjectionComboChange();"
								   focusOut="projComboBox.selectedItem = projectionSRS.value; projValidLabel.text = '';"
								   editable="true"
								   width="120"
								   />
				<!--<mx:TextInput id="projTextInput"
				creationComplete="linkBindableProperty(projectionSRS, event.target, 'text');"
					change="projValidLabel.text = projectionVerifier(projTextInput.text) ? 'Valid' : 'Invalid';"
					focusOut="projTextInput.text = projectionSRS.value; projValidLabel.text = '';"
					/>-->
				<mx:Label id="projValidLabel" fontWeight="bold"/>
			</mx:HBox>
			<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
						 toolTip="Checking this box makes all of the tool's attributes visible in this tool's probe tooltip"
						 creationComplete="linkBindableProperty(includeToolAttributesInProbe,event.target,'selected')"/>
			<mx:CheckBox id="zoomControlsToggle" label="Enable zoom and pan"
						 toolTip="This option enables the zoom slider and pan buttons"
						 creationComplete="linkBindableProperty(showZoomControls,event.target,'selected')"/>
			<mx:CheckBox id="mouseModeControlsToggle" label="Show mouse mode controls"
						 toolTip="This option enables the mouse mode buttons"
						 creationComplete="linkBindableProperty(showMouseModeControls,event.target,'selected')"/>
			<mx:HBox>
				<mx:Label text="Mouse wheel scroll factor:" />
				<mx:NumericStepper maximum="10" minimum="1" stepSize=".01" creationComplete="linkBindableProperty(this.visualization.zoomFactor, event.target, 'value')"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox label="Layer Visibility" verticalGap="10" id="visibleScaleRangesUI">
			<ui:Indent label="Current Zoom" labelTextAlign="left" group="{scaleRangeIndentGroup}">
				<mx:HSlider id="scaleRangeTabZoomSlider" 
							width="100%" 
							tickInterval="1"
							change="handleZoomSliderChange(event);"
							minimum="{zoomSliderMinimum}"
							maximum="{zoomSliderMaximum}"
							liveDragging="true" />
			</ui:Indent>
			<ui:LinkableObjectList id="visibleScaleRangesList"
								   width="100%" height="100%"
								   initialize="visibleScaleRangesList.hashMap = visualization.layers"
								   borderStyle="none"
								   paddingLeft="0">
				<ui:itemRenderer>
					<mx:Component>
						<ui:Indent label="{layerName}" labelTextAlign="left" group="{outerDocument.scaleRangeIndentGroup}">
							<mx:Script>
								<![CDATA[
									import mx.events.SliderEvent;
									
									import weave.api.core.ILinkableObject;
									import weave.api.juggleGroupedCallback;
									import weave.api.primitives.IBounds2D;
									import weave.core.UIUtils;
									import weave.editors.managers.LayerListComponent;
									import weave.utils.ZoomUtils;
									import weave.visualization.layers.PlotLayer;
									import weave.visualization.layers.SelectablePlotLayer;
									[Bindable] private var layerName:String;
									private var currentlyUpdatingLayerZoomRangeSlider:Boolean = false;
									
									private function handleLayerChange():void
									{
										if (!data)
											return;
										
										var fullDataBounds:IBounds2D = outerDocument.visualization.fullDataBounds;
										var area:Number = fullDataBounds.getArea();
										if (!isNaN(area))
										{
											layerName = outerDocument.visualization.layers.getName(data as ILinkableObject);
											
											var minScreenSize:Number = outerDocument.visualization.minScreenSize.value;
											
											var minZoomLevel:Number = ZoomUtils.getZoomLevelFromScale(
												fullDataBounds, minScreenSize, data.minVisibleScale.value
											);
											
											var maxZoomLevel:Number = ZoomUtils.getZoomLevelFromScale(
												fullDataBounds, minScreenSize, data.maxVisibleScale.value
											);
											
											currentlyUpdatingLayerZoomRangeSlider = true;
											layerZoomRangeSlider.values = [minZoomLevel, maxZoomLevel];
											currentlyUpdatingLayerZoomRangeSlider = false;
										}
									}
									
									override public function set data(value:Object):void
									{
										value = value as SelectablePlotLayer || value as PlotLayer;
										juggleGroupedCallback(data as ILinkableObject, value as ILinkableObject, this, handleLayerChange, true);
										super.data = value;
									}
									private function handleScaleSliderChange(event:SliderEvent):void
									{
										if (data && !currentlyUpdatingLayerZoomRangeSlider && UIUtils.hasFocus(layerZoomRangeSlider))
										{
											var fullDataBounds:IBounds2D = outerDocument.visualization.fullDataBounds;
											var minScreenSize:Number = outerDocument.visualization.minScreenSize.value;
											var minVisibleZoomLevel:Number = layerZoomRangeSlider.values[0];
											var maxVisibleZoomLevel:Number = layerZoomRangeSlider.values[1];
											
											data.minVisibleScale.value = ZoomUtils.getScaleFromZoomLevel(
												fullDataBounds, minScreenSize, minVisibleZoomLevel
											);
											
											data.maxVisibleScale.value = ZoomUtils.getScaleFromZoomLevel(
												fullDataBounds, minScreenSize, maxVisibleZoomLevel
											);
										}
									}
								]]>
							</mx:Script>
							
							<mx:HSlider id="layerZoomRangeSlider"
										liveDragging="true"
										thumbCount="2"
										tickInterval="1"
										snapInterval="{outerDocument.zoomSliderSnapping}"
										showTrackHighlight="true" 
										minimum="{outerDocument.zoomSliderMinimum}" 
										maximum="{outerDocument.zoomSliderMaximum}"
										change="handleScaleSliderChange(event)"
										mouseDown="event.target.setFocus(); event.stopPropagation()"
										width="100%"/>
						</ui:Indent>
					</mx:Component>			
				</ui:itemRenderer>
			</ui:LinkableObjectList>
		</mx:VBox>
	</ui:ControlPanel>
	<ui:IndentGroup id="scaleRangeIndentGroup"/>
	<mx:Number id="zoomSliderMinimum"/>
	<mx:Number id="zoomSliderMaximum"/>
	<mx:Number id="zoomSliderSnapping">0.25</mx:Number>
</SimpleVisTool>
